using namespace cv;

/* hough transform */
double compute_skew (Mat& im, Mat& orig) {
    double skew   = 0;
    double max_r  = sqrt(pow(.5*im.cols,2) + pow(.5*im.rows,2));
    int angleBins = 180;

    // accumulator plane
    Mat acc = Mat::zeros(Size(2*max_r,angleBins), CV_32SC1);
    int cenx = im.cols/2;
    int ceny = im.rows/2;
    for(int x=1; x<im.cols-1; x++) {
        for(int y=1; y<im.rows-1; y++) {
            if(im.at<uchar>(y,x) == 255) {
                for(int t=0; t < angleBins; t++) {
                    double r =(x-cenx)*cos((double)t/angleBins*CV_PI)+(y-ceny)*sin((double)t /angleBins*CV_PI);
                    r+=max_r;
                    acc.at<int>(t,int(r))++;
                }
            }
        }
    }
    Mat thresh;
    normalize(acc, acc, 255, 0, NORM_MINMAX);
    convertScaleAbs(acc, acc);
    Point maxLoc;
    minMaxLoc(acc, 0, 0, 0, &maxLoc);
    double theta = (double)maxLoc.y/angleBins * CV_PI;
    double rho = maxLoc.x - max_r;
    if(abs(sin(theta)) < 0.000001) {
        Point2d p1 = Point2d(rho+im.cols/2,0);
        Point2d p2 = Point2d(rho+im.cols/2,im.rows);
        line(orig, p1, p2, Scalar(0, 0, 255), 1);
        skew=90;
    } else {
        double m = -cos(theta)/sin(theta);
        double b = rho/sin(theta) + im.rows/2.-m * im.cols/2.;
        Point2d p1 = Point2d(0,b);
        Point2d p2 = Point2d(im.cols, im.cols * m + b);
        line(orig, p1, p2, Scalar(0,0,255), 1);
        double skewangle;
        skewangle= (p1.x - p2.x) > 0 ? (atan2(p1.y-p2.y,p1.x-p2.x)*180./CV_PI):(atan2(p2.y-p1.y,p2.x-p1.x)*180./CV_PI);
        skew=skewangle;
    }
    return skew;
}
